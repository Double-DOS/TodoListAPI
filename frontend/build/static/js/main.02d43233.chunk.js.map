{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","todoList","activeItem","id","title","completed","editing","fetchTasks","bind","handleChange","handleSubmit","deleteItem","strikeUnstrike","this","console","log","fetch","then","response","json","data","setState","e","name","target","value","preventDefault","url","method","headers","body","JSON","stringify","catch","error","task","tasks","self","className","onSubmit","style","flex","onChange","type","placeholder","map","index","key","onClick","startEdit","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iSAgKeA,G,gEA3Jd,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACZC,SAAS,GACTC,WAAW,CACVC,GAAG,KACHC,MAAM,GACNC,WAAU,GAEXC,SAAQ,GAET,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAClB,EAAKI,eAAiB,EAAKA,eAAeJ,KAApB,gBAfL,E,iEAmBjBK,KAAKN,e,mCAGO,IAAD,OACXO,QAAQC,IAAI,sBACZC,MAAM,wCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OACT,EAAKC,SAAS,CACbpB,SAASmB,S,mCAKCE,GACZ,IAAIC,EAAOD,EAAEE,OAAOD,KAChBE,EAAQH,EAAEE,OAAOC,MACrBX,QAAQC,IAAI,OAAQQ,GACpBT,QAAQC,IAAI,SAAUU,GAEtBZ,KAAKQ,SAAS,CACbnB,WAAW,2BACPW,KAAKb,MAAME,YADL,IAETE,MAAMqB,Q,mCAKIH,GAAG,IAAD,OACdA,EAAEI,iBACFZ,QAAQC,IAAI,QAASF,KAAKb,MAAME,YAChC,IAAIyB,EAAM,0CAEgB,IAAvBd,KAAKb,MAAMM,UACbqB,EAAG,gDAA4Cd,KAAKb,MAAME,WAAWC,GAAlE,KACHU,KAAKQ,SAAS,CACbf,SAAQ,KAGVU,MAAMW,EAAI,CACTC,OAAO,OACPC,QAAQ,CACP,eAAe,oBAEhBC,KAAKC,KAAKC,UAAUnB,KAAKb,MAAME,cAC7Be,MAAK,SAACC,GACR,EAAKX,aACL,EAAKc,SAAS,CACbnB,WAAW,CACVC,GAAG,KACHC,MAAM,GACNC,WAAU,QAGV4B,OAAM,SAASC,GACjBpB,QAAQC,IAAI,SAAUmB,Q,gCAIdC,GACTtB,KAAKQ,SAAS,CACbnB,WAAWiC,EACX7B,SAAS,M,iCAIA6B,GAAM,IAAD,OACfnB,MAAM,yCAAD,OAA0CmB,EAAKhC,GAA/C,KAAqD,CACzDyB,OAAO,SACPC,QAAQ,CACP,eAAe,sBAEdZ,MAAK,SAACC,GACR,EAAKX,kB,qCAIQ4B,GAAM,IAAD,OACnBA,EAAK9B,WAAa8B,EAAK9B,UACvBS,QAAQC,IAAI,QAASoB,EAAK9B,WAC1BW,MAAM,yCAAD,OAA0CmB,EAAKhC,GAA/C,KAAqD,CACzDyB,OAAO,OACPC,QAAQ,CACP,eAAe,oBAEhBC,KAAKC,KAAKC,UAAU,CAAC,UAAYG,EAAK9B,UAAW,MAAQ8B,EAAK/B,UAC5Da,MAAK,WACP,EAAKV,kB,+BAKN,IAAI6B,EAAQvB,KAAKb,MAAMC,SACnBoC,EAAOxB,KACX,OACC,yBAAKyB,UAAU,aACd,yBAAKnC,GAAG,kBACP,yBAAKA,GAAG,gBACP,0BAAMoC,SAAU1B,KAAKH,aAAcP,GAAG,QACrC,yBAAKmC,UAAU,gBACd,yBAAKE,MAAO,CAACC,KAAM,IAClB,2BAAOC,SAAU7B,KAAKJ,aAAckC,KAAK,OAAOL,UAAU,eAAef,KAAK,QAAQE,MAAOZ,KAAKb,MAAME,WAAWE,MAAOD,GAAG,QAAQyC,YAAY,cAElJ,yBAAKJ,MAAO,CAACC,KAAM,IAClB,2BAAOtC,GAAG,SAASmC,UAAU,kBAAkBK,KAAK,SAASlB,MAAM,SAASF,KAAK,YAKrF,yBAAKpB,GAAG,gBACNiC,EAAMS,KAAI,SAASV,EAAMW,GACzB,OACC,yBAAKC,IAAKD,EAAOR,UAAU,6BAC1B,yBAAKU,QAAS,kBAAMX,EAAKzB,eAAeuB,IAAOK,MAAO,CAACC,KAAM,KACxC,IAAnBN,EAAK9B,UACL,8BAAO8B,EAAK/B,OAEZ,gCAAS+B,EAAK/B,QAGhB,yBAAKoC,MAAO,CAACC,KAAM,IAClB,4BAAQO,QAAS,kBAAMX,EAAKY,UAAUd,IAAOG,UAAU,oCAAvD,SAED,yBAAKE,MAAO,CAACC,KAAM,IAClB,4BAAQO,QAAS,kBAAMX,EAAK1B,WAAWwB,IAAOG,UAAU,sCAAxD,iB,GAhJQY,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdjC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMiC,c","file":"static/js/main.02d43233.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { render } from '@testing-library/react';\n\nclass App extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttodoList:[],\n\t\t\tactiveItem:{\n\t\t\t\tid:null,\n\t\t\t\ttitle:'',\n\t\t\t\tcompleted:false,\n\t\t\t},\n\t\t\tediting:false,\n\t\t}\n\t\tthis.fetchTasks = this.fetchTasks.bind(this);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t\tthis.deleteItem = this.deleteItem.bind(this);\n\t\tthis.strikeUnstrike = this.strikeUnstrike.bind(this);\n\t}\n\n\tcomponentWillMount(){\n\t\tthis.fetchTasks()\n\t}\n\n\tfetchTasks(){\n\t\tconsole.log('Fetching Tasks....')\n\t\tfetch('http://localhost:8000/api/task-list/')\n\t\t.then(response => response.json())\n\t\t.then(data =>\n\t\t\tthis.setState({\n\t\t\t\ttodoList:data\n\t\t\t})\n\t\t\t)\n\t}\n\n\thandleChange(e){\n\t\tvar name = e.target.name\n\t\tvar value = e.target.value\n\t\tconsole.log('Name', name)\n\t\tconsole.log('Value:', value)\n\n\t\tthis.setState({\n\t\t\tactiveItem:{\n\t\t\t\t...this.state.activeItem,\n\t\t\t\ttitle:value\n\t\t\t}\n\t\t})\n\t}\n\n\thandleSubmit(e){\n\t\te.preventDefault()\n\t\tconsole.log('Item:', this.state.activeItem)\n\t\tvar url = 'http://localhost:8000/api/task-create/'\n\n\t\tif(this.state.editing === true){\n\t\t\turl = `http://localhost:8000/api/task-update/${this.state.activeItem.id}/`\n\t\t\tthis.setState({\n\t\t\t\tediting:false,\n\t\t\t})\n\t\t}\n\t\tfetch(url,{\n\t\t\tmethod:'POST',\n\t\t\theaders:{\n\t\t\t\t'Content-Type':'application/json',\n\t\t\t},\n\t\t\tbody:JSON.stringify(this.state.activeItem)\n\t\t}).then((response) => {\n\t\t\tthis.fetchTasks()\n\t\t\tthis.setState({\n\t\t\t\tactiveItem:{\n\t\t\t\t\tid:null,\n\t\t\t\t\ttitle:'',\n\t\t\t\t\tcompleted:false,\n\t\t\t\t}\n\t\t\t})\n\t\t}).catch(function(error){\n\t\t\tconsole.log('ERROR:', error)\n\t\t})\n\t}\n\n\tstartEdit(task){\n\t\tthis.setState({\n\t\t\tactiveItem:task,\n\t\t\tediting: true,\n\t\t})\n\t}\n\n\tdeleteItem(task){\n\t\tfetch(`http://localhost:8000/api/task-delete/${task.id}/`,{\n\t\t\tmethod:'DELETE',\n\t\t\theaders:{\n\t\t\t\t'Content-Type':'application/json'\n\t\t\t},\n\t\t}).then((response) =>{\n\t\t\tthis.fetchTasks()\n\t\t})\n\t}\n\n\tstrikeUnstrike(task){\n\t\ttask.completed = !task.completed\n\t\tconsole.log('TASK:', task.completed)\n\t\tfetch(`http://localhost:8000/api/task-update/${task.id}/`,{\n\t\t\tmethod:'POST',\n\t\t\theaders:{\n\t\t\t\t'Content-Type':'application/json',\n\t\t\t},\n\t\t\tbody:JSON.stringify({'completed':task.completed, 'title':task.title})\n\t\t}).then(()=>{\n\t\t\tthis.fetchTasks()\n\t\t})\n\t}\n\n  \trender(){\n\t\tvar tasks = this.state.todoList\n\t\tvar self = this\n\t\treturn(\n\t\t\t<div className=\"container\">\n\t\t\t\t<div id=\"task-container\">\n\t\t\t\t\t<div id=\"form-wrapper\">\n\t\t\t\t\t\t<form onSubmit={this.handleSubmit} id=\"form\">\n\t\t\t\t\t\t\t<div className=\"flex-wrapper\">\n\t\t\t\t\t\t\t\t<div style={{flex: 6}}>\n\t\t\t\t\t\t\t\t\t<input onChange={this.handleChange} type=\"text\" className=\"form-control\" name=\"title\" value={this.state.activeItem.title} id=\"title\" placeholder=\"Add Task\"/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div style={{flex: 1}}>\n\t\t\t\t\t\t\t\t\t<input id=\"submit\" className=\"btn btn-success\" type=\"submit\" value=\"Submit\" name=\"add\"/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"list-wrapper\">\n\t\t\t\t\t\t{tasks.map(function(task, index){\n\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t<div key={index} className=\"task-wrapper flex-wrapper\">\n\t\t\t\t\t\t\t\t\t<div onClick={() => self.strikeUnstrike(task)} style={{flex: 7}}>\n\t\t\t\t\t\t\t\t\t\t{task.completed === false ?(\n\t\t\t\t\t\t\t\t\t\t\t<span>{task.title}</span>\n\t\t\t\t\t\t\t\t\t\t): (\n\t\t\t\t\t\t\t\t\t\t\t<strike>{task.title}</strike>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div style={{flex: 1}}>\n\t\t\t\t\t\t\t\t\t\t<button onClick={() => self.startEdit(task)} className=\"btn btn-sm btn-outline-info edit\">Edit</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div style={{flex: 1}}>\n\t\t\t\t\t\t\t\t\t\t<button onClick={() => self.deleteItem(task)} className=\"btn btn-sm btn-outline-dark delete\">-</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n  \t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}